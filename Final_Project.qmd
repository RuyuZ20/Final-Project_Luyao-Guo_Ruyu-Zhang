title: "Dap2 Final project-Housing Burden Among Older Adults"
author: "Luyao Guo, Ruyu Zhang"
date: "2024-11-20"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

Data Dictionary:
YEAR  Census year 
SAMPLE  IPUMS sample identifier
SERIAL  Household serial number 
CBSERIAL  Original Census Bureau household serial number
HHWT  Household weight
CLUSTER Household cluster for variance estimation
COUNTYFIP County (FIPS code, identifiable counties only)
CITY  City (identifiable cities only)
STRATA  Household strata for variance estimation
GQ  Group quarters status
NFAMS Number of families in household
PERNUM  Person number in sample unit 
PERWT   Person weight
RELATE  Relationship to household head
SEX   Sex
MARST Marital status
RACE  Race
EDUC  Educational attainment
EMPSTAT Employment status
FTOTINC Total family income
POVERTY Poverty status
INCEARN Total personal earned income
STATEFIP  State (FIPS code)
AGE     Age
RENTGRS Monthly gross rent
INCTOT  Total personal income
DIFFMOB Independent living difficulty
DIFFCARE  Self-care difficulty

```{python}
from shiny import App, ui, render, reactive 
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import altair as alt
import numpy as np
import os
import warnings
warnings.filterwarnings("ignore")
alt.renderers.enable("png")
```

Step 1: Data Cleaning and Initial Exploration

(Partner 1): 
1. Handle placeholder values and clean the data.
2. Identify and replace placeholder values like 9999999 with NaN.
3. Filter the dataset for individuals aged 65+.
4. Create a new column for Housing_Burden (e.g., RENTGRS / INCTOT * 100).

Deliverables:
Cleaned data ready for analysis.
Summary of missing values and cleaned variables.

```{python}
base_path = "/Users/apple/Desktop/class/Dap-2/problem_sets/final_project/Untitled/Final-Project_Luyao-Guo_Ruyu-Zhang"
path_1 = os.path.join(base_path, "usa_00003.csv")
path_2 = os.path.join(base_path, "states_fips.csv")
shapefile_path = os.path.join(base_path, "tl_2023_us_state.shp")

print(f"USA Data Path: {path_1}")
print(f"FIPS Data Path: {path_2}")
print(f"Shapefile Path: {shapefile_path}")
```


Extract columns as needed

```{python}
#1
columns_needed = ['YEAR', 'STATEFIP', 'AGE', 'RENTGRS', 'INCTOT', 'POVERTY', 'DIFFMOB', 'DIFFCARE']
cleaned_data = pd.read_csv(path_1, usecols=columns_needed)
print(cleaned_data.info())
```

```{python}
#2
# Replace NaN
placeholder_values = [9999999, 0]
cleaned_data.replace(placeholder_values, np.nan, inplace=True)
# Check NaN
print(cleaned_data.isnull().sum())
```


 Drop Columns with Excessive Missing Values

```{python}
#3
# drop missing values rentgers
cleaned_data = cleaned_data.dropna(subset=['RENTGRS'])
print(cleaned_data.isnull().sum())

#4
# Fill in other missing values with default values
cleaned_data['AGE'].fillna(cleaned_data['AGE'].median(), inplace=True)
cleaned_data['INCTOT'].fillna(0, inplace=True)
cleaned_data['DIFFMOB'].fillna(0, inplace=True)
cleaned_data['DIFFCARE'].fillna(0, inplace=True)
cleaned_data['POVERTY'].fillna(0, inplace=True)


#5 Filter for individuals aged 65 and older
cleaned_data = cleaned_data[cleaned_data['AGE'] >= 65]

#6 Create Housing Burden column *
cleaned_data['Housing_Burden'] = (cleaned_data['RENTGRS'] / cleaned_data['INCTOT']) * 100
# Handle infinite values
cleaned_data['Housing_Burden'].replace([np.inf, -np.inf], np.nan, inplace=True)  
 # Assume 0 burden for undefined cases
cleaned_data['Housing_Burden'].fillna(0, inplace=True) 

# 7: Summary of missing values and cleaned variables
print("Summary of missing values after cleaning:")
print(cleaned_data.isnull().sum())

print("\nData overview after cleaning:")
print(cleaned_data.describe())
```

Partner 2: Perform initial data exploration.
1. Calculate descriptive statistics for key variables (AGE, INCTOT, RENTGRS, Housing_Burden, DIFFMOB, DIFFCARE).
2. Add state abbreviation column by matching state FIPS to state abbreviations.
3. Group data by STATEFIP and calculate average housing burden for older adults.
4. Draw a bar chart to visualize the distribution of housing burdens by state.

Deliverables:
Summary statistics 
cleaned_data.csv
State-level table showing average housing burden and total elderly population

```{python}
# Descriptive statistics calculation
stats_summary = cleaned_data[['AGE', 'INCTOT', 'RENTGRS',
                              'Housing_Burden','POVERTY', 'DIFFMOB', 'DIFFCARE']].describe().round(2)
print(stats_summary)
```

```{python}
df_states = pd.read_csv(path_2)
df_states=df_states.rename(columns={'Postal':'State','State':'State_name'})
# Match state FIPS to state abbreviation
cleaned_data = pd.merge(cleaned_data, df_states,
                        left_on='STATEFIP', right_on='FIPS', how='left')
```


```{python}
# Aggregate average housing burden and total elderly population per state
state_summary_hb = cleaned_data.groupby('State').agg(
    avg_housing_burden=('Housing_Burden', 'mean'),
    total_elderly_population=('AGE', 'count'),
    STATEFP=('STATEFIP', 'first') 
).reset_index()
print(state_summary_hb)
```

```{python}
# Sort by average housing burden
state_summary_sorted_hb = state_summary_hb.sort_values(
    by='avg_housing_burden', ascending=False).reset_index(drop=True)
print(state_summary_sorted_hb)

# Bar chart for distribution of housing burden by state
chart_housing_burden = alt.Chart(state_summary_sorted_hb).mark_bar().encode(
    x=alt.X('avg_housing_burden:Q', title='Average Housing Burden (%)'),
    y=alt.Y('State:N', title='State Abbr.', sort='-x'),
    tooltip=['State', 'avg_housing_burden']
).configure_axis(
    labelFontSize=6,
    titleFontSize=10
).properties(
    title='Average Housing Burden Distribution by State (2023)',
    width=700,
    height=500
)

chart_housing_burden.display()
```

Step 2: Geographic Mapping with State Shapefiles

(Partner 1):
1. Load the U.S. state boundary shapefile and ensure relevant columns are formatted 
consistently for merging.
2. Merge the state boundary GeoDataFrame with the state-level dataset to integrate 
housing burden data for older adults.
3. Create a choropleth map to highlight state-level variations in average housing burden, 
with an optimized legend and layout for better readability.

```{python}
# 1: Load the shapefile
gdf_states = gpd.read_file(shapefile_path)
gdf_states['STATEFP'] = gdf_states['STATEFP'].astype(int)
```

```{python}
# 2: Merge `state_summary_hb` with `gdf_states`
state_summary_hb['STATEFP'] = state_summary_hb['STATEFP'].astype(int)
merged_gdf = gdf_states.merge(state_summary_hb, on='STATEFP', how='left')
```

```{python}
# 3: Plot the choropleth map
fig, ax = plt.subplots(1, 1, figsize=(12, 8))

merged_gdf.plot(
    column='avg_housing_burden',
    ax=ax,
    cmap='OrRd',
    edgecolor='0.8',
    legend=True,
    legend_kwds={
        'label': "Housing Burden (%)",  
        'orientation': "vertical"      
    }
).set_axis_off()

ax.set_xlim([-180, -50])
ax.set_ylim([15, 75])

plt.title("Average Housing Burden by State (2023)", fontsize=15)

plt.show()
```


(Partner 2): Analyze high-burden states.
1. Identify states with the top 10 highest average housing burdens.
2. Compare demographic and socioeconomic factors (e.g., poverty rates, mobility issues) between high- and low-burden states.

Deliverables:
List of top 10 high-burden states.
Summary of key differences between high- and low-burden states.

```{python}
top_10_high_burden = state_summary_sorted_hb.head (10)
print (top_10_high_burden)
```

```{python}
# Calculate averages for the top 10 states vs. others
high_burden_states = top_10_high_burden['STATEFP'].unique()
cleaned_data['Is_High_Burden'] = cleaned_data['STATEFIP'].isin(high_burden_states)

# Group by high-burden status
comparison_summary = cleaned_data.groupby('Is_High_Burden').agg(
    avg_mobility_issues=('DIFFMOB', 'mean'),
    avg_self_care_difficulty=('DIFFCARE', 'mean'),
    avg_poverty_rate=('POVERTY', 'mean') 
).reset_index()

# Display the summary
print(comparison_summary)
```



Step 3: Shiny App Development
(Partner 1): Build an interactive map.
Use the GeoDataFrame to create an interactive map in the Shiny app.
Include options to filter by housing burden, poverty, or mobility issues.
Deliverables:
Working map with interactivity (e.g., tooltips or filters).
Prepare for shiny

```{python}
# Ensure merged_gdf is defined before the app
state_summary_hb['STATEFP'] = state_summary_hb['STATEFP'].astype(int)
merged_gdf = gdf_states.merge(state_summary_hb, on='STATEFP', how='left')
print(merged_gdf.columns)
# Inspect  
print(merged_gdf.head()) 
```