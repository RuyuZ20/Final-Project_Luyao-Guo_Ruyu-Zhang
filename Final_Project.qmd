title: "Dap2 Final project-Housing Burden Among Older Adults"
author: "Luyao Guo, Ruyu Zhang"
date: "2024-12-07"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

Data Dictionary:
YEAR  Census year 
SEX   Sex
FAMSIZE The number of own family members residing with each individual, including the person her/himself.
RACE  Race
EDUC  Educational attainment
EMPSTAT Employment status
FTOTINC Total family income
POVERTY Poverty status
INCEARN Total personal earned income
STATEFIP  State (FIPS code)
AGE     Age
RENTGRS Monthly gross rent
INCTOT  Total personal income
DIFFMOB Independent living difficulty
DIFFCARE  Self-care difficulty

```{python}
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import altair as alt
import numpy as np
import os
import warnings
warnings.filterwarnings("ignore")
```

Data Cleaning 

```{python}
base_path = '/Users/ruyuzhang/Desktop/PPHA 30538'
path_1 = os.path.join(base_path, "usa_00004.csv")
path_2 = os.path.join(base_path, "states_fips.csv")
shapefile_path = os.path.join(base_path, "tl_2023_us_state.shp")

print(f"USA Data Path: {path_1}")
print(f"FIPS Data Path: {path_2}")
print(f"Shapefile Path: {shapefile_path}")
```

```{python}
raw_data = pd.read_csv(path_1)
```

```{python}
#Extract columns as needed
columns_needed = ['YEAR', 'STATEFIP', 'AGE', 'RENTGRS', 'INCTOT', 'FAMSIZE','POVERTY', 'DIFFMOB', 'DIFFCARE']
cleaned_data = raw_data[columns_needed].copy()
print(cleaned_data.info())
```

```{python}
# Replace NaN
placeholder_values = [9999999, 0]
cleaned_data.replace(placeholder_values, np.nan, inplace=True)
# Check NaN
print(cleaned_data.isnull().sum())
```

```{python}
#  Drop Rows with Missing Values
cleaned_data = cleaned_data.dropna(
    subset=['RENTGRS', 'INCTOT', 'AGE', 'FAMSIZE', 'POVERTY', 'DIFFMOB', 'DIFFCARE'])

# Filter for individuals aged 65 and older and with income above $5000
cleaned_data = cleaned_data[(cleaned_data['AGE'] >= 65) & (
    cleaned_data['INCTOT'] > 12000)]

# Drop rows where variables are 0
cleaned_data = cleaned_data[(cleaned_data['POVERTY'] > 0) &
                            (cleaned_data['FAMSIZE'] > 0) &
                            (cleaned_data['DIFFMOB'] > 0) &
                            (cleaned_data['DIFFCARE'] > 0)]

# Calculate annual housing cost per individual
cleaned_data['Annual_Housing_Cost'] = (
    cleaned_data['RENTGRS'] * 12) / cleaned_data['FAMSIZE']

# Calculate individual-level housing burden
cleaned_data['Housing_Burden'] = (
    cleaned_data['Annual_Housing_Cost'] / cleaned_data['INCTOT']) * 100

# Handle infinite values
cleaned_data['Housing_Burden'].replace([np.inf, -np.inf], np.nan, inplace=True)
cleaned_data = cleaned_data.dropna(subset=['Housing_Burden'])

# Summary of missing values and cleaned variables
print("Summary of missing values after cleaning:")
print(cleaned_data.isnull().sum())

print("\nData overview after cleaning:")
print(cleaned_data.describe().round(2))
```

```{python}
df_states = pd.read_csv(path_2)
df_states = df_states.rename(
    columns={'Postal': 'State', 'State': 'State_name'})

# Match state FIPS to state abbreviation
cleaned_data = pd.merge(cleaned_data, df_states,
                        left_on='STATEFIP', right_on='FIPS', how='left')
```

```{python}
# Save cleaned dataframe as .csv
cleaned_data.to_csv('cleaned_data.csv')
```


Data Overview
```{python}
# Descriptive statistics calculation
stats_summary = cleaned_data[['AGE', 'INCTOT', 'RENTGRS',
                              'Housing_Burden', 'POVERTY', 'DIFFMOB', 'DIFFCARE']].describe().round(2)
print(stats_summary)
```

```{python}
# Identify individuals with significant housing cost burdens
cleaned_data['Significant_Burden'] = cleaned_data['Housing_Burden'] > 30

# Total elderly population
total_elderly = cleaned_data.shape[0]

# Elderly population with significant housing cost burdens
elderly_with_burden = cleaned_data['Significant_Burden'].sum()

# Percentage of elderly with significant housing cost burdens
percentage_with_burden = (elderly_with_burden / total_elderly) * 100

print(f"Total Elderly Population: {total_elderly}")
print(f"Elderly Facing Significant Housing Cost Burden: {elderly_with_burden}")
print(f"Percentage with Significant Housing Cost Burden: {
      percentage_with_burden:.2f}%")
```

```{python}
# Data for visualization
labels = ['Significant Burden', 'No Significant Burden']
values = [elderly_with_burden, total_elderly - elderly_with_burden]
percentages = [100 * v / total_elderly for v in values]
# Plot
fig, ax = plt.subplots()
bars = plt.bar(labels, values, color=['lightblue', 'blue'])

# Add percentage labels above each bar
for bar, percentage in zip(bars, percentages):
    ax.text(
        bar.get_x() + bar.get_width() / 2,
        bar.get_height() + 5,
        f'{percentage:.2f}%',
        ha='center',
        va='bottom',
        fontsize=10
    )

# Chart details
plt.title('Elderly Population Facing Significant Housing Cost Burdens')
plt.ylabel('Number of Individuals')
plt.ylim(0, max(values) * 1.2)
plt.show()
```

Summary data by states

```{python}
# Aggregate average housing burden and total elderly population per state
state_summary_hb = cleaned_data.groupby('State').agg(
    avg_gross_rent=('RENTGRS','mean'),
    avg_housing_burden=('Housing_Burden', 'mean'),
    total_elderly_population=('AGE', 'count'),
    avg_poverty_rate=('POVERTY', 'mean'),
    avg_mobility_issues=('DIFFMOB', 'mean'),
    avg_self_care_difficulty=('DIFFCARE', 'mean'),
    avg_income=('INCTOT', 'mean'),
    STATEFP=('STATEFIP', 'first') 
).reset_index()
print(state_summary_hb)
```

```{python}
# Sort by average housing burden
state_summary_sorted_hb = state_summary_hb.sort_values(
    by='avg_housing_burden', ascending=False).reset_index(drop=True)
print(state_summary_sorted_hb)
```


Linear Regression Models
```{python}
import statsmodels.api as sm

# Predict Housing Burden using Poverty Rate and Elderly Population
X = state_summary_hb[['avg_poverty_rate', 'total_elderly_population']]
y = state_summary_hb['avg_housing_burden']

# Add constant to the predictors (required for statsmodels)
X = sm.add_constant(X)

# Fit the regression model
model = sm.OLS(y, X).fit()

# Print the summary of the regression model
print(model.summary())
```

```{python}
# Scatterplot with regression line
regression_chart_1 = alt.Chart(state_summary_hb).mark_circle(size=100).encode(
    x=alt.X('avg_poverty_rate:Q', 
            title='Average Poverty Rate',
            scale=alt.Scale(domain=[200, 360]) 
           ),
    y=alt.Y('avg_housing_burden:Q', 
            title='Average Housing Burden (%)',
            scale=alt.Scale()  
           ),
     color=alt.Color('State:N', legend=None),
    tooltip=['State', 'avg_poverty_rate', 'avg_housing_burden', 'total_elderly_population']
).properties(
    title=alt.TitleParams(
        text='Linear Regression: Housing Burden vs. Poverty Rate',
        anchor='middle',  
        fontSize=16
    ),
    width=400,  
    height=400  
)

# Add regression line
regression_line = regression_chart_1.transform_regression(
    'avg_poverty_rate', 'avg_housing_burden'
).mark_line(color='red')

# Combine scatterplot and regression line
regression_combined_chart_1 = (regression_chart_1 + regression_line).configure_view(
    stroke=None  
).configure_title(
    anchor='middle',  
    fontSize=16
)

regression_combined_chart_1.display()
```

```{python}
# Predict Housing Burden using Mobility Issue and Elderly Population
X = state_summary_hb[['avg_mobility_issues', 'total_elderly_population']]
y = state_summary_hb['avg_housing_burden']

# Add constant to the predictors (required for statsmodels)
X = sm.add_constant(X)

# Fit the regression model
model = sm.OLS(y, X).fit()

# Print the summary of the regression model
print(model.summary())
```

```{python}
# Scatterplot with regression line
regression_chart_2 = alt.Chart(state_summary_hb).mark_circle(size=100).encode(
    x=alt.X('avg_mobility_issues:Q', 
            title='Average Mobility Issues Score',
            scale=alt.Scale(domain=[1, 1.3])  
           ),
    y=alt.Y('avg_housing_burden:Q', 
            title='Average Housing Burden (%)',
            scale=alt.Scale() 
           ),
    color=alt.Color('State:N', legend=None),
    tooltip=['State', 'avg_mobility_issues', 'avg_housing_burden', 'total_elderly_population']
).properties(
    title=alt.TitleParams(
        text='Linear Regression: Housing Burden vs. Mobility Issue',
        anchor='middle',  
        fontSize=16
    ),
    width=400,  
    height=400  
)

# Add regression line
regression_line = regression_chart_2.transform_regression(
    'avg_mobility_issues', 'avg_housing_burden'
).mark_line(color='red')

# Combine scatterplot and regression line
regression_combined_chart_2 = (regression_chart_2 + regression_line).configure_view(
    stroke=None  
).configure_title(
    anchor='middle',  
    fontSize=16
)

regression_combined_chart_2.display()
```

```{python}
# Predict Housing Burden using Mobility Issue and Elderly Population
X = state_summary_hb[['avg_self_care_difficulty', 'total_elderly_population']]
y = state_summary_hb['avg_housing_burden']

# Add constant to the predictors (required for statsmodels)
X = sm.add_constant(X)

# Fit the regression model
model = sm.OLS(y, X).fit()

# Print the summary of the regression model
print(model.summary())
```

```{python}
# Scatterplot with regression line
regression_chart_3 = alt.Chart(state_summary_hb).mark_circle(size=100).encode(
    x=alt.X('avg_self_care_difficulty:Q',
            title='Average Self-care Score', 
            scale=alt.Scale(domain=[1, 1.2])
            ),
    y=alt.Y('avg_housing_burden:Q', 
        title='Average Housing Burden (%)'
            ),
    color=alt.Color('State:N', legend=None),
    tooltip=['State', 'avg_self_care_difficulty',
             'avg_housing_burden', 'total_elderly_population']
).properties(
    title=alt.TitleParams(
        text='Linear Regression: Housing Burden vs. Self-care Issue',
        anchor='middle',  
        fontSize=16
    ),
    width=400,  
    height=400  
)

# Add regression line
regression_line = regression_chart_3.transform_regression(
    'avg_self_care_difficulty', 'avg_housing_burden'
).mark_line(color='red')

# Combine scatterplot and regression line
regression_combined_chart_3 = (regression_chart_3 + regression_line).configure_view(
    stroke=None  
).configure_title(
    anchor='middle',  
    fontSize=16
)
regression_combined_chart_3.display()
```

Multivariate Model

```{python}
# Select predictors and target variable
predictors = ['avg_poverty_rate', 'total_elderly_population', 'avg_mobility_issues', 'avg_self_care_difficulty']
target = 'avg_housing_burden'
```

```{python}
# Select predictors and target variable
X = state_summary_hb[predictors]
y = state_summary_hb[target]

# Add a constant for the regression intercept
X = sm.add_constant(X)

# Fit the regression model
model = sm.OLS(y, X).fit()

# Print the regression summary
print(model.summary())
```

```{python}
# Extract coefficients
coefficients = model.params.reset_index()
coefficients.columns = ['Predictor', 'Coefficient']

print(coefficients)

# Plot coefficients
coefficient_chart = alt.Chart(coefficients).mark_bar().encode(
    x=alt.X('Coefficient:Q', title='Coefficient Value'),
    y=alt.Y('Predictor:N', title='Predictor', sort='-x'),
    tooltip=['Predictor', 'Coefficient']
).properties(
    title='Regression Coefficients: Entire U.S.',
    width=600,
    height=400
)

coefficient_chart.display()
```


Geographic Distribution of Housing Burden
```{python}
# Define regional groups for U.S. states
region_mapping = {
    'Northeast': ['9', '23', '25', '33', '34', '36', '42', '44', '50', '10', '11'],  
    'Midwest': ['17', '18', '19', '20', '26', '27', '29', '31', '38', '39', '46', '55'],  
    'South': ['1', '5', '12', '13', '21', '22', '24', '28', '37', '40', '45', '47', '48', '51', '54'],
    'West': ['2', '4', '6', '8', '15', '16', '30', '32', '35', '41', '49', '53', '56']  
}

# Function to assign regions based on STATEFIP
def assign_region(state_fip):
    for region, states in region_mapping.items():
        if str(state_fip) in states:  
            return region
    return 'Unknown'

# Add a 'Region' column to the cleaned data
cleaned_data['Region'] = cleaned_data['STATEFIP'].apply(assign_region)
```

```{python}
# Group by Region and calculate averages for key metrics
regional_summary = cleaned_data.groupby('Region').agg(
    avg_mobility_issues=('DIFFMOB', 'mean'),
    avg_self_care_difficulty=('DIFFCARE', 'mean'),
    avg_poverty_rate=('POVERTY', 'mean'),
    avg_housing_burden=('Housing_Burden', 'mean')
).reset_index()

print(regional_summary)
```

```{python}
chart_region = alt.Chart(regional_summary).mark_bar().encode(
    x=alt.X('avg_housing_burden:Q', title='Average Housing Burden (%)'),
    y=alt.Y('Region:N', title='Region', sort='-x'),
    tooltip=['Region', 'avg_housing_burden', 'avg_poverty_rate', 'avg_mobility_issues']
).properties(
    title='Average Housing Burden by Region',
    width=500,
    height=200
)

chart_region.display()
```

```{python}
top_10_high_burden = state_summary_sorted_hb.head (10)
print (top_10_high_burden)

# Bar chart for top 10 high housing burden states
chart_top_10 = alt.Chart(top_10_high_burden).mark_bar().encode(
    x=alt.X('avg_housing_burden:Q', title='Average Housing Burden (%)'),
    y=alt.Y('State:N', title='State Abbr.', sort='-x'),
    tooltip=['State', 'avg_housing_burden']
).configure_axis(
    labelFontSize=8,
    titleFontSize=10
).properties(
    title='Top 10 highest housing burden state',
    width=500,
    height=300
)

chart_top_10.display()
```

```{python}
# Calculate averages for the top 10 states vs. others
high_burden_states = top_10_high_burden['STATEFP'].unique()
cleaned_data['Is_High_Burden'] = cleaned_data['STATEFIP'].isin(high_burden_states)

# Group by high-burden status
comparison_summary = cleaned_data.groupby('Is_High_Burden').agg(
    avg_mobility_issues=('DIFFMOB', 'mean'),
    avg_self_care_difficulty=('DIFFCARE', 'mean'),
    avg_poverty_rate=('POVERTY', 'mean') 
).reset_index()

# Display the summary
print(comparison_summary)
```


Standardized Test

```{python}
# Create a copy of the regional summary for standardization
standardized_diff = regional_summary.copy()

# List of metrics to standardize
metrics = ['avg_mobility_issues', 'avg_self_care_difficulty', 'avg_poverty_rate', 'avg_housing_burden']

# Standardize metrics by calculating z-scores
for metric in metrics:
    mean_metric = regional_summary[metric].mean()
    std_metric = regional_summary[metric].std()
    standardized_diff[f'std_{metric}'] = (regional_summary[metric] - mean_metric) / std_metric

# Display the standardized differences
print(standardized_diff)
```

```{python}
# Ensure columns for folding exist
columns_to_fold = [
    'std_avg_mobility_issues',
    'std_avg_self_care_difficulty',
    'std_avg_poverty_rate',
    'std_avg_housing_burden'
]

# Fold the data into long format for Altair
folded_data = standardized_diff.melt(
    id_vars=['Region'], 
    value_vars=columns_to_fold, 
    var_name='Metric', 
    value_name='Standardized Value'
)

# Inspect the folded data
print(folded_data.head())

# Create the heatmap
heatmap = alt.Chart(folded_data).mark_rect().encode(
    x=alt.X('Metric:N', title='Metric'),
    y=alt.Y('Region:N', title='Region'),
    color=alt.Color('Standardized Value:Q', scale=alt.Scale(scheme='redblue')),
    tooltip=['Region', 'Metric', 'Standardized Value']
).properties(
    title='Standardized Differences Across Regions',
    width=400,
    height=200
)

heatmap.display()
```

